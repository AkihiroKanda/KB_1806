// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.mybossseasonfinal.justthejob.DI.Component;

import com.mybossseasonfinal.justthejob.DI.Module.FragmentModule;
import com.mybossseasonfinal.justthejob.DI.Module.FragmentModule_ProvideCompanyListFragmentViewFactory;
import com.mybossseasonfinal.justthejob.DI.Module.FragmentModule_ProvideEntrySheetFragmentViewFactory;
import com.mybossseasonfinal.justthejob.DI.Module.FragmentModule_ProvideNavigationDrawerFragmentViewFactory;
import com.mybossseasonfinal.justthejob.DI.Module.FragmentModule_ProvideWorkerIllustrationFragmentViewFactory;
import com.mybossseasonfinal.justthejob.MainActivity.CompanyListFragment.CompanyListFragment;
import com.mybossseasonfinal.justthejob.MainActivity.CompanyListFragment.CompanyListFragmentContract;
import com.mybossseasonfinal.justthejob.MainActivity.CompanyListFragment.CompanyListFragmentPresenter;
import com.mybossseasonfinal.justthejob.MainActivity.CompanyListFragment.CompanyListFragment_MembersInjector;
import com.mybossseasonfinal.justthejob.MainActivity.MainFragment.EntrySheetFragment.EntrySheetContract;
import com.mybossseasonfinal.justthejob.MainActivity.MainFragment.EntrySheetFragment.EntrySheetFragment;
import com.mybossseasonfinal.justthejob.MainActivity.MainFragment.EntrySheetFragment.EntrySheetFragment_MembersInjector;
import com.mybossseasonfinal.justthejob.MainActivity.MainFragment.EntrySheetFragment.EntrySheetPresenter;
import com.mybossseasonfinal.justthejob.MainActivity.MainFragment.WorkerIllustrationFragment.WorkerIllustrationFragment;
import com.mybossseasonfinal.justthejob.MainActivity.MainFragment.WorkerIllustrationFragment.WorkerIllustrationFragmentContract;
import com.mybossseasonfinal.justthejob.MainActivity.MainFragment.WorkerIllustrationFragment.WorkerIllustrationFragmentPresenter;
import com.mybossseasonfinal.justthejob.MainActivity.MainFragment.WorkerIllustrationFragment.WorkerIllustrationFragment_MembersInjector;
import com.mybossseasonfinal.justthejob.MainActivity.NavigationDrawerFragment.NavigationDrawerFragment;
import com.mybossseasonfinal.justthejob.MainActivity.NavigationDrawerFragment.NavigationDrawerFragmentContract;
import com.mybossseasonfinal.justthejob.MainActivity.NavigationDrawerFragment.NavigationDrawerFragmentPresenter;
import com.mybossseasonfinal.justthejob.MainActivity.NavigationDrawerFragment.NavigationDrawerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerFragmentComponent implements FragmentComponent {
  private AppComponent appComponent;

  private Provider<NavigationDrawerFragmentContract.View>
      provideNavigationDrawerFragmentViewProvider;

  private Provider<CompanyListFragmentContract.View> provideCompanyListFragmentViewProvider;

  private Provider<WorkerIllustrationFragmentContract.View>
      provideWorkerIllustrationFragmentViewProvider;

  private Provider<EntrySheetContract.View> provideEntrySheetFragmentViewProvider;

  private DaggerFragmentComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private NavigationDrawerFragmentPresenter getNavigationDrawerFragmentPresenter() {
    return new NavigationDrawerFragmentPresenter(
        Preconditions.checkNotNull(
            appComponent.apiService(), "Cannot return null from a non-@Nullable component method"),
        provideNavigationDrawerFragmentViewProvider.get());
  }

  private CompanyListFragmentPresenter getCompanyListFragmentPresenter() {
    return new CompanyListFragmentPresenter(
        Preconditions.checkNotNull(
            appComponent.apiService(), "Cannot return null from a non-@Nullable component method"),
        provideCompanyListFragmentViewProvider.get());
  }

  private WorkerIllustrationFragmentPresenter getWorkerIllustrationFragmentPresenter() {
    return new WorkerIllustrationFragmentPresenter(
        Preconditions.checkNotNull(
            appComponent.apiService(), "Cannot return null from a non-@Nullable component method"),
        provideWorkerIllustrationFragmentViewProvider.get());
  }

  private EntrySheetPresenter getEntrySheetPresenter() {
    return new EntrySheetPresenter(
        Preconditions.checkNotNull(
            appComponent.apiService(), "Cannot return null from a non-@Nullable component method"),
        provideEntrySheetFragmentViewProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.appComponent = builder.appComponent;
    this.provideNavigationDrawerFragmentViewProvider =
        DoubleCheck.provider(
            FragmentModule_ProvideNavigationDrawerFragmentViewFactory.create(
                builder.fragmentModule));
    this.provideCompanyListFragmentViewProvider =
        DoubleCheck.provider(
            FragmentModule_ProvideCompanyListFragmentViewFactory.create(builder.fragmentModule));
    this.provideWorkerIllustrationFragmentViewProvider =
        DoubleCheck.provider(
            FragmentModule_ProvideWorkerIllustrationFragmentViewFactory.create(
                builder.fragmentModule));
    this.provideEntrySheetFragmentViewProvider =
        DoubleCheck.provider(
            FragmentModule_ProvideEntrySheetFragmentViewFactory.create(builder.fragmentModule));
  }

  @Override
  public void inject(NavigationDrawerFragment navigationDrawerFragment) {
    injectNavigationDrawerFragment(navigationDrawerFragment);
  }

  @Override
  public void inject(CompanyListFragment companyListFragment) {
    injectCompanyListFragment(companyListFragment);
  }

  @Override
  public void inject(WorkerIllustrationFragment workerIllustrationFragment) {
    injectWorkerIllustrationFragment(workerIllustrationFragment);
  }

  @Override
  public void inject(EntrySheetFragment entrySheetFragment) {
    injectEntrySheetFragment(entrySheetFragment);
  }

  private NavigationDrawerFragment injectNavigationDrawerFragment(
      NavigationDrawerFragment instance) {
    NavigationDrawerFragment_MembersInjector.injectNavigationDrawerFragmentPresenter(
        instance, getNavigationDrawerFragmentPresenter());
    return instance;
  }

  private CompanyListFragment injectCompanyListFragment(CompanyListFragment instance) {
    CompanyListFragment_MembersInjector.injectCompanyListFragmentPresenter(
        instance, getCompanyListFragmentPresenter());
    return instance;
  }

  private WorkerIllustrationFragment injectWorkerIllustrationFragment(
      WorkerIllustrationFragment instance) {
    WorkerIllustrationFragment_MembersInjector.injectWorkerIllustrationFragmentPresenter(
        instance, getWorkerIllustrationFragmentPresenter());
    return instance;
  }

  private EntrySheetFragment injectEntrySheetFragment(EntrySheetFragment instance) {
    EntrySheetFragment_MembersInjector.injectEntrySheetPresenter(
        instance, getEntrySheetPresenter());
    return instance;
  }

  public static final class Builder {
    private FragmentModule fragmentModule;

    private AppComponent appComponent;

    private Builder() {}

    public FragmentComponent build() {
      if (fragmentModule == null) {
        throw new IllegalStateException(FragmentModule.class.getCanonicalName() + " must be set");
      }
      if (appComponent == null) {
        throw new IllegalStateException(AppComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerFragmentComponent(this);
    }

    public Builder fragmentModule(FragmentModule fragmentModule) {
      this.fragmentModule = Preconditions.checkNotNull(fragmentModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }
  }
}
